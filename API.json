{
  "categories": [
    {
      "category": "Authentication & Authorization",
      "testCases": [
        {
          "name": "Test Bypass Authentication with Missing Token",
          "steps": [
            "Send request to protected endpoint without token",
            "Verify that the response is 401 Unauthorized"
          ]
        },
        {
          "name": "Test Bypass Authentication with Invalid Token",
          "steps": [
            "Send request with malformed or expired token",
            "Check if API still allows access"
          ]
        },
        {
          "name": "Test IDOR (Insecure Direct Object Reference)",
          "steps": [
            "Login as user A",
            "Attempt to access user B's resource via /api/users/{id}",
            "Check if unauthorized access is blocked"
          ]
        },
        {
          "name": "Test Role-Based Access Control (RBAC)",
          "steps": [
            "Login as regular user",
            "Attempt admin-only API actions",
            "Verify access is denied"
          ]
        }
      ]
    },
    {
      "category": "Injection & Input Validation",
      "testCases": [
        {
          "name": "Test SQL Injection on Login Endpoint",
          "steps": [
            "Send POST to /login with payload ' OR '1'='1",
            "Check if authentication bypass occurs"
          ]
        },
        {
          "name": "Test Command Injection via Input",
          "steps": [
            "Send malicious payload to vulnerable parameter (e.g., ; whoami)",
            "Check if command executes on server"
          ]
        },
        {
          "name": "Test NoSQL Injection",
          "steps": [
            "Send JSON payload with { \"username\": { \"$ne\": null } }",
            "Check if authentication bypass or data leakage occurs"
          ]
        }
      ]
    },
    {
      "category": "Rate Limiting & Brute Force",
      "testCases": [
        {
          "name": "Test Login Brute Force Protection",
          "steps": [
            "Send multiple failed login attempts with different passwords",
            "Check if account lockout or rate limiting is enforced"
          ]
        },
        {
          "name": "Test Password Reset Rate Limiting",
          "steps": [
            "Send rapid password reset requests to /forgot-password",
            "Verify 429 responses or blocking occurs"
          ]
        }
      ]
    },
    {
      "category": "Information Disclosure",
      "testCases": [
        {
          "name": "Check for Stack Trace in Error Messages",
          "steps": [
            "Send malformed request",
            "Verify response does not expose internal stack traces"
          ]
        },
        {
          "name": "Check for Sensitive Data Exposure",
          "steps": [
            "Retrieve user object",
            "Ensure tokens, passwords, or PII are not present in response"
          ]
        }
      ]
    },
    {
      "category": "Security Misconfigurations",
      "testCases": [
        {
          "name": "Test API Availability over HTTP",
          "steps": [
            "Access API using http://",
            "Ensure request is blocked or redirected to HTTPS"
          ]
        },
        {
          "name": "Check Security Headers",
          "steps": [
            "Send request to API",
            "Verify headers: Content-Security-Policy, X-Frame-Options, X-XSS-Protection, etc."
          ]
        }
      ]
    },
    {
      "category": "Mass Assignment & Object Level Security",
      "testCases": [
        {
          "name": "Test Mass Assignment of Admin Privileges",
          "steps": [
            "Send POST to /api/users with JSON including admin:true",
            "Verify system ignores unauthorized attribute"
          ]
        },
        {
          "name": "Test Access to Unauthorized Object Fields",
          "steps": [
            "Request resource with expanded fields parameter",
            "Check if hidden or restricted fields are exposed"
          ]
        }
      ]
    },
    {
      "category": "Business Logic Abuse",
      "testCases": [
        {
          "name": "Test Reuse of Coupon Codes",
          "steps": [
            "Apply valid coupon code multiple times",
            "Check if system allows repeated use improperly"
          ]
        },
        {
          "name": "Test Order Price Manipulation",
          "steps": [
            "Intercept request payload to order endpoint",
            "Modify price field",
            "Verify if manipulated price is accepted"
          ]
        }
      ]
    },
    {
      "category": "Improper Asset Management",
      "testCases": [
        {
          "name": "Test Deprecated API Endpoints",
          "steps": [
            "Access known deprecated endpoints (e.g., /v1/old-api)",
            "Verify they are disabled or return proper error"
          ]
        },
        {
          "name": "Test Unauthenticated Access to Development APIs",
          "steps": [
            "Scan for /dev, /test, or /internal endpoints",
            "Verify they are not publicly accessible"
          ]
        }
      ]
    }
  ]
}
